---
title: "A conjetura de Collatz"
number-sections: true
lang: pt-BR
---

## A Conjetura de Collatz


$\newcommand{\N}{\mathbb N}$

:::{.problem}
Considere a seguinte função $f:\N\to \N$:
$$
    f(n)=\left\{\begin{array}{cc} n/2 & \mbox{se $n$ for par;}\\
    3n+1 & \mbox{se $n$ for ímpar.}\end{array}\right.
$$
A [Conjetura de Collatz](https://en.wikipedia.org/wiki/Collatz_conjecture) afirma que para todo $n\in\N$, existe um número $k$ tal que aplicando a função $f$ consecutivamente $k$ vezes em $n$, o resultado vai ser igual a $1$. Em outras, palavras, $f^k(n)=1$.
:::

## Tarefa 1

:::{.subproblem}
Escreva uma função `collatz( n )` que toma $n$ como input e devolve $f(n)$. Faça testes da sua função com vários números. 

A sua função deve comportar-se de acordo com os seguintes exemplos:
```matlab
gap> collatz( 15 );
46
gap> collatz( 14 );
7
gap> collatz( 5 );
16
```
:::

:::{.hint}
Pode ser que você já resolveu esta tarefa na @sec-tarefa-collatz. Se não, precisa testar, usando `if`, (@sec-if) se o input é par ou ímpar e para isso pode usar a operação `mod` (@sec-ops-arit). Se precisar de ajuda com funções, consulte a @sec-functions.
:::



<!--
collatz := function( n )

    if n mod 2 = 0 then 
        return n/2;
    else 
        return 3*n+1;
    fi;
end;
-->

## Tarefa 2

:::{.subproblem}
Escreva uma função `nr_steps( n )` que vai calcular o número de vezes a função $f$ precisa ser aplicada em $n$ para obter o número $1$. Em outras palavras,  `nr_steps( n )` deve devolver o menor número $k$ tal que $f^k(n)=1$. Para $n=1$, nós vamos assumir que $f^0(1)=1$. 

A sua função precisa devolver o resultado de acordo com os seguintes exemplos.
```matlab
gap> nr_steps( 1 );
0
gap> nr_steps( 3 );
7
gap> nr_steps( 14 );
17
gap> nr_steps( 32 );
5
```
:::

<!--
nr_steps := function( n )
    local st;

    st := 0;
    while n > 1 do 
        n := collatz( n );
        st := st+1;
    od;

    return st;
end;
-->

:::{.hint}
Você usará a função `collatz( n )` na tarefa anterior em um laço `while` (@sec-while) ou `repeat` (@sec-repeat). Vai precisar também de variável local (explicado na @sec-functions).
:::



## Tarefa 3

:::{.subproblem}
Escreva uma função `max_nr_steps( n )` para determinar o número $k$ tal que `nr_steps( k )` é maior possível para os números em $\{1,\ldots,n\}$. A função deve devolver uma lista (@sec-list) de comprimento $2$ tal que a primeira entrada da lista é o número $k$ e a segunda é o número `nr_steps( k )`. 

O comportamento da sua função seguirá os seguintes exemplos:
```matlab
gap> max_nr_steps( 1000 );
[ 871, 178 ]
gap> max_nr_steps( 10000 );
[ 6171, 261 ]
gap> max_nr_steps( 100000 );
[ 77031, 350 ]
```
:::

<!--
max_nr_steps := function( n )
    local max, max_i, i, max_nr_i;

    max := 0; max_i := 1;
    for i in [1..n] do
        max_nr_i := nr_steps( i );  
        if max_nr_i > max then 
            max := max_nr_i;
            max_i := i; 
        fi;
    od; 

    return [max_i, max];
end;
-->

:::{.hint}
Pode usar a função `nr_steps( k )` escrita na tarefa anterior em um laço  `for` (@sec-for) que roda na lista `[1..n]`. 
:::

## Tarefa 4


:::{.subproblem}
Vamos otimizar o código que foi escrito para a Tarefa 3. Calcular `nr_steps( k )` separadamente para todo $k\in \{1,\ldots,n\}$ faz muita computação redundante. Por exemplo, calculando `max_nr_steps( 6 )` deste jeito, fazemos as seguintes contas 
```matlab
1 → 1 
2 → 1
3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 
4 → 2 → 1 
5 → 16 → 8 → 4 → 2 → 1
6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1
```
A computação `nr_steps( 6 )` deve realizar que `nr_steps( 3 )` já foi calculado e simplificar a conta por computar que `nr_steps( 6 ) = nr_steps( 3 ) + 1`. Escreva uma versão da função `max_nr_steps_fast( n )` utilizando as computações anteriores e compare o tempo de execução das duas versões.

De acordo com o seguinte exemplo, calcular o valor maximal de `nr_steps( k )` para `k in [1..1000000]` demora mais que 25 segundos usando a função escrita para a Tarefa 3. A nova função faz esta computação em apenas 1,3 segundos. 
```matlab
gap> max_nr_steps( 1000000 ); time;   
[ 837799, 524 ]
25391
gap> max_nr_steps_fast( 1000000 ); time;
[ 837799, 524 ]
1335
```
:::

:::{.hint}
Denotando por $k_n$ o valor da função `nr_steps( n )`, guarde o valor de $k_n$ como o $k$-ésima entrada em uma lista. A lista pode ser uma lista esparsa (@sec-list). Provavelmente precisará das expressões `break` e `continue` (@sec-break-continue). Pode usar também a variável interna `time` que devolve o tempo (em milisegundos) que a última instrução tomou ([manual](https://docs.gap-system.org/doc/ref/chap7.html#X7C0F91F982189624)).
:::



<!--
max_nr_steps_fast := function( n )
    local nr_steps, max_i, max_nr, i, k, i0, nr_steps_local;

    nr_steps := [0];

    max_i := 0; max_nr := 0;
    for i in [2..n] do

        if IsBound( nr_steps[i]) then 
            continue;
        fi;

        k := 0; i0 := i;
        repeat 
            i0 := collatz( i0 );
            k := k+1;
            if IsBound( nr_steps[i0] ) then
                nr_steps_local := nr_steps[i0] + k; 
                nr_steps[i] := nr_steps_local;
                if nr_steps_local > max_nr then 
                    max_i := i;
                    max_nr := nr_steps_local;
                fi;
                break;
            fi;
        until false; 
    od; 

    return [max_i,max_nr];    
end;
-->