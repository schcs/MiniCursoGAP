---
title: "Listas, matrizes e permutações"
number-sections: true
lang: pt-BR
---

Nesta página, vamos ver como trabalhar com listas, matrizes e permutações em `GAP`.

## Listas {#sec-list}

:::{.subexample}
Listas são importantes em `GAP` ([manual](https://docs.gap-system.org/doc/ref/chap21.html)). Listas contém uma sequência de objetos. Os objetos nas listas podem ser números, carateres, ou até objetos complexos, tais como grupos, subgrupos de um grupo, etc. Os seguintes exemplos mostram a criação de listas e as operações básicas com listas.

```matlab
gap> L := [1..10]
[ 1 .. 10 ]
gap> L1 := [1,3,5,7,9,10,8,6,4,2,0];
[ 1, 3, 5, 7, 9, 10, 8, 6, 4, 2, 0 ]
gap> L2 := ["a","b","c","z","x","y"];
[ "a", "b", "c", "z", "x", "y" ]
```

Para acessar os elementos de uma lista, usamos `list[n]` que devolve o $n$-ésimo elemento começando por `list[1]`. Para verificar se um objeto pertence ou não a uma lista, pode usar o operador `in`.

```matlab
gap> L1[3];
5
gap> 10 in L1;
true
gap> 10 in L2;
false
gap> "a" in L2;
true
```

A posição de um elemento em uma lista pode ser determinada usando a função `Position`.

```matlab
gap> Position( L1, 10 );
6
gap> Position( L1, -1 );
fail
```

Frequentamente, precisa-se criar novas listas usando listas. Por exemplo, frequentamente queremos criar a lista de elementos de uma outra lista que satisfazem uma certa propriedade. Esta tarefa pode ser resolvida usando a função `Filtered( list, func )` em `GAP` onde `list` é uma lista e `func` é uma função (@sec-functions). Nos seguintes exemplos veremos alguns usos simples desta construção.

```matlab 
gap> Filtered( L1, IsEvenInt );
[ 10, 8, 6, 4, 2, 0 ]
gap> Filtered( L1, IsOddInt );
[ 1, 3, 5, 7, 9 ]
gap> Filtered( L1, x -> x mod 2 = 0 );
[ 10, 8, 6, 4, 2, 0 ]
gap> Filtered( L1, x -> x mod 2 = 1 );
[ 1, 3, 5, 7, 9 ]
```

Novas listas podem ser criadas também aplicando uma função nos elementos de uma outra lista. Por exemplo, criamos a lista dos quadrados dos primeiros 10 números naturais:
```matlab
gap> List( [1..10], x->x^2 );
[ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]
```

`GAP` trabalha também com listas nas quais algumas entradas não estão definidas. Considere por exemplo as seguintes instruções.
```matlab
gap> l := [1,2,,,12];
[ 1, 2,,, 12 ]
gap> l[1];
1
gap> l[2];
2
gap> l[3];
Error, List Element: <list>[3] must have an assigned value
not in any function at *stdin*:166
type 'quit;' to quit to outer loop
brk> quit;
gap> IsBound( l[3] );
false
gap> IsBound( l[4] );
false
gap> IsBound( l[5] );
true
gap> l[5];
12
gap> 
gap> l[8] := 22;
22
gap> l;
[ 1, 2,,, 12,,, 22 ]
```
Note que, ao acessar `l[3]`, obtemos um erro, pois esta entrada não existe. Para evitar este erro, podemos verificar se existe ou não a entrada usando `IsBound`.
:::

## Matrizes {#sec-matrix}


:::{.subexample}
Em `GAP` uma matriz é lista de listas (que são as linhas da matriz) ([manual](https://docs.gap-system.org/doc/ref/chap24.html)). As entradas de matrizes são tipicamente números ou, mais geralmente, elementos de um anel ou corpo. As matrizes podem ser somadas e multiplicadas exatamente como números.
```matlab
gap> m1 := [[1,2,0],[0,-2,3]];
[ [ 1, 2, 0 ], [ 0, -2, 3 ] ]
gap> Display( m1 );
[ [   1,   2,   0 ],
  [   0,  -2,   3 ] ]
gap> m2 := [[1,-1],[0,3],[4,1/2]];
[ [ 1, -1 ], [ 0, 3 ], [ 4, 1/2 ] ]
gap> Display( m2 );
[ [    1,   -1 ],
  [    0,    3 ],
  [    4,  1/2 ] ]
gap> m1*m2;
[ [ 1, 5 ], [ 12, -9/2 ] ]
gap> Display( last );
[ [     1,     5 ],
  [    12,  -9/2 ] ]
gap> m2*m1;
[ [ 1, 4, -3 ], [ 0, -6, 9 ], [ 4, 7, 3/2 ] ]
gap> Display( last );
[ [    1,    4,   -3 ],
  [    0,   -6,    9 ],
  [    4,    7,  3/2 ] ]
```
:::

## Permutações {#sec-permutation}


:::{.subexample}
Outro objeto fundamento quando trabalhamos com grupos finitos é a permutação. Permutações em `GAP` podem ser definidas como produto de cíclos disjuntos mas também usando uma lista. 
```matlab
gap> p1 := (1,2,3)(4,5,6);
(1,2,3)(4,5,6)
gap> p1^2;
(1,3,2)(4,6,5)
gap> p2 := PermList( [1,5,4,3,2] );
(2,5)(3,4)
gap> p1*p2;
(1,5,6,3)(2,4)
gap> p2*p1;
(1,2,6,4)(3,5)
```
:::
