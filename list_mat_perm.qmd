---
title: "Listas, matrizes e permutações"
number-sections: true
lang: pt-BR
---

## Listas

Listas são importantes em ```GAP```. Listas contém uma sequência de objetos. Os objetos nas listas podem ser números, carateres, ou até objetos complexos, tais como grupos, subgrupos de um grupo, etc. Os seguintes exemplos mostram a criação de listas e as operações básicas com listas.

```matlab
gap> L1 := [1,3,5,7,9,10,8,6,4,2,0];
[ 1, 3, 5, 7, 9, 10, 8, 6, 4, 2, 0 ]
gap> L2 := ["a","b","c","z","x","y"];
[ "a", "b", "c", "z", "x", "y" ]
gap> L1[3];
5
gap> 10 in L1;
true
gap> 10 in L2;
false
gap> "a" in L2;
true
gap> Union( L1, L2 );
[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "a", "b", "c", "x", "y", "z" ]
gap> Position( L1, 10 );
6
gap> Position( L1, -1 );
fail
gap> Intersection( L1, L2 );
[  ]
gap> Filtered( L, x -> x mod 2 = 0 );
Error, Variable: 'L' must have a value
not in any function at *stdin*:2
gap> Filtered( L1, x -> x mod 2 = 0 );
[ 10, 8, 6, 4, 2, 0 ]
gap> Filtered( L1, x -> x mod 2 = 1 );
[ 1, 3, 5, 7, 9 ]
gap> Filtered( L1, x -> IsEvenInt( x ));
[ 10, 8, 6, 4, 2, 0 ]
gap> Filtered( L1, x -> IsOddInt( x ));
[ 1, 3, 5, 7, 9 ]
gap> Filtered( L1, IsEvenInt );
[ 10, 8, 6, 4, 2, 0 ]
gap> Filtered( L1, IsOddInt );
[ 1, 3, 5, 7, 9 ]
gap> 
```

Listas podem ser criadas usando outras listas. Por exemplo, criamos a list dos quadrados dos primeiros 10 números naturais:
```matlab
gap> List( [1..10], x->x^2 );
[ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]
```

## Matrizes 

Em `GAP` uma matriz é lista de listas (que são as linhas da matriz). As entradas de matrizes são tipicamente números ou, mais geralmente, elementos de um anel ou corpo. As matrizes podem ser somadas e multiplicadas exatamente como números.
```matlab
gap> List( [1..10], x->x^2 );
[ 1, 4, 9, 16, 25, 36, 49, 64, 81, 100 ]
gap> m1 := [[1,2,0],[0,-2,3]];
[ [ 1, 2, 0 ], [ 0, -2, 3 ] ]
gap> Display( m1 );
[ [   1,   2,   0 ],
  [   0,  -2,   3 ] ]
gap> m2 := [[1,-1],[0,3],[4,1/2]];
[ [ 1, -1 ], [ 0, 3 ], [ 4, 1/2 ] ]
gap> Display( m2 );
[ [    1,   -1 ],
  [    0,    3 ],
  [    4,  1/2 ] ]
gap> m1*m2;
[ [ 1, 5 ], [ 12, -9/2 ] ]
gap> Display( last );
[ [     1,     5 ],
  [    12,  -9/2 ] ]
gap> m2*m1;
[ [ 1, 4, -3 ], [ 0, -6, 9 ], [ 4, 7, 3/2 ] ]
gap> Display( last );
[ [    1,    4,   -3 ],
  [    0,   -6,    9 ],
  [    4,    7,  3/2 ] ]
```

## Permutações

Outro objeto fundamento quando trabalhamos com grupos finitos é a permutação. Permutações em `GAP` podem ser definidas como produto de cíclos disjuntos mas também usando uma lista. 
```matlab
gap> p1 := (1,2,3)(4,5,6);
(1,2,3)(4,5,6)
gap> p1^2;
(1,3,2)(4,6,5)
gap> p2 := PermList( [1,5,4,3,2] );
(2,5)(3,4)
gap> p1*p2;
(1,5,6,3)(2,4)
gap> p2*p1;
(1,2,6,4)(3,5)
```

